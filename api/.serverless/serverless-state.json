{
  "service": {
    "service": "framefeed",
    "serviceObject": {
      "name": "framefeed"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([^{}]+?)}",
      "name": "aws",
      "profile": "adamdabbracci",
      "runtime": "nodejs12.x",
      "environment": {
        "ENV": "dev",
        "UPLOAD_BUCKET": "framefeed-upload-dev"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:*"
          ],
          "Resource": "*"
        }
      ],
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/framefeed-dev-getUsers"
            }
          },
          "GetFeedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/framefeed-dev-getFeed"
            }
          },
          "RemoveItemFromFeedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/framefeed-dev-removeItemFromFeed"
            }
          },
          "GetUploadUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/framefeed-dev-getUploadUrl"
            }
          },
          "ResizeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/framefeed-dev-resize"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "framefeed",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/framefeed-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/framefeed-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "framefeed",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/framefeed/dev/1609978761482-2021-01-07T00:19:21.482Z/framefeed.zip"
              },
              "FunctionName": "framefeed-dev-getUsers",
              "Handler": "functions.getUsers",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV": "dev",
                  "UPLOAD_BUCKET": "framefeed-upload-dev"
                }
              }
            },
            "DependsOn": [
              "GetUsersLogGroup"
            ]
          },
          "GetUsersLambdaVersionWig70GgOUz2RgPgdK9bh6wRnaWZLeliDMB5NfAd8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUsersLambdaFunction"
              },
              "CodeSha256": "BKCQEeLfbJayVrHIISxz4/SftE6KHuE/JUYFyNqABvM="
            }
          },
          "GetFeedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/framefeed/dev/1609978761482-2021-01-07T00:19:21.482Z/framefeed.zip"
              },
              "FunctionName": "framefeed-dev-getFeed",
              "Handler": "functions.getFeed",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV": "dev",
                  "UPLOAD_BUCKET": "framefeed-upload-dev"
                }
              }
            },
            "DependsOn": [
              "GetFeedLogGroup"
            ]
          },
          "GetFeedLambdaVersionIVlOTkLvDqxfHtCaJbJB48G2ig3XqT9K2TIxtHqB7Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFeedLambdaFunction"
              },
              "CodeSha256": "BKCQEeLfbJayVrHIISxz4/SftE6KHuE/JUYFyNqABvM="
            }
          },
          "RemoveItemFromFeedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/framefeed/dev/1609978761482-2021-01-07T00:19:21.482Z/framefeed.zip"
              },
              "FunctionName": "framefeed-dev-removeItemFromFeed",
              "Handler": "functions.removeItemFromFeed",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV": "dev",
                  "UPLOAD_BUCKET": "framefeed-upload-dev"
                }
              }
            },
            "DependsOn": [
              "RemoveItemFromFeedLogGroup"
            ]
          },
          "RemoveItemFromFeedLambdaVersioneuSBe9FJObI0hbjAbX4W8e7JbdFmOUZdWxtZqYqc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RemoveItemFromFeedLambdaFunction"
              },
              "CodeSha256": "BKCQEeLfbJayVrHIISxz4/SftE6KHuE/JUYFyNqABvM="
            }
          },
          "GetUploadUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/framefeed/dev/1609978761482-2021-01-07T00:19:21.482Z/framefeed.zip"
              },
              "FunctionName": "framefeed-dev-getUploadUrl",
              "Handler": "functions.getUploadUrl",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV": "dev",
                  "UPLOAD_BUCKET": "framefeed-upload-dev"
                }
              }
            },
            "DependsOn": [
              "GetUploadUrlLogGroup"
            ]
          },
          "GetUploadUrlLambdaVersionArtua7SDX7c4xt8R8BlYdPNEGhnMMY2saf1DhDv866I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUploadUrlLambdaFunction"
              },
              "CodeSha256": "BKCQEeLfbJayVrHIISxz4/SftE6KHuE/JUYFyNqABvM="
            }
          },
          "ResizeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/framefeed/dev/1609978761482-2021-01-07T00:19:21.482Z/framefeed.zip"
              },
              "FunctionName": "framefeed-dev-resize",
              "Handler": "functions.resize",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 180,
              "Environment": {
                "Variables": {
                  "ENV": "dev",
                  "UPLOAD_BUCKET": "framefeed-upload-dev"
                }
              }
            },
            "DependsOn": [
              "ResizeLogGroup"
            ]
          },
          "ResizeLambdaVersionAKVwQLabxxc5NktX2hwJPxVEdVxZLvXJfjndHWFkeM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ResizeLambdaFunction"
              },
              "CodeSha256": "BKCQEeLfbJayVrHIISxz4/SftE6KHuE/JUYFyNqABvM="
            }
          },
          "S3BucketFramefeeduploaddev": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "framefeed-upload-dev",
              "NotificationConfiguration": {
                "LambdaConfigurations": [
                  {
                    "Event": "s3:ObjectCreated:*",
                    "Function": {
                      "Fn::GetAtt": [
                        "ResizeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Filter": {
                      "S3Key": {
                        "Rules": [
                          {
                            "Name": "prefix",
                            "Value": "input/"
                          },
                          {
                            "Name": "suffix",
                            "Value": ".png"
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "ResizeLambdaPermissionFramefeeduploaddevS3"
            ]
          },
          "ResizeLambdaPermissionFramefeeduploaddevS3": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ResizeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "s3.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":s3:::framefeed-upload-dev"
                  ]
                ]
              },
              "SourceAccount": {
                "Ref": "AWS::AccountId"
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-framefeed",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{userId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUseridVarFeed": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUseridVar"
              },
              "PathPart": "feed",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpload": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "upload",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUploadGetDashurl": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUpload"
              },
              "PathPart": "get-url",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUseridVarFeedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarFeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUploadGetDashurlOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadGetDashurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarFeedGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarFeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFeedLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUseridVarFeedDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUseridVarFeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RemoveItemFromFeedLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUploadGetDashurlPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadGetDashurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUploadUrlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1609978756097": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUsersOptions",
              "ApiGatewayMethodUseridVarFeedOptions",
              "ApiGatewayMethodUploadGetDashurlOptions",
              "ApiGatewayMethodUsersGet",
              "ApiGatewayMethodUseridVarFeedGet",
              "ApiGatewayMethodUseridVarFeedDelete",
              "ApiGatewayMethodUploadGetDashurlPost"
            ]
          },
          "GetUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFeedLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFeedLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RemoveItemFromFeedLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RemoveItemFromFeedLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUploadUrlLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUploadUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "GetUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUsersLambdaVersionWig70GgOUz2RgPgdK9bh6wRnaWZLeliDMB5NfAd8"
            }
          },
          "GetFeedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFeedLambdaVersionIVlOTkLvDqxfHtCaJbJB48G2ig3XqT9K2TIxtHqB7Q"
            }
          },
          "RemoveItemFromFeedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RemoveItemFromFeedLambdaVersioneuSBe9FJObI0hbjAbX4W8e7JbdFmOUZdWxtZqYqc"
            }
          },
          "GetUploadUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUploadUrlLambdaVersionArtua7SDX7c4xt8R8BlYdPNEGhnMMY2saf1DhDv866I"
            }
          },
          "ResizeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ResizeLambdaVersionAKVwQLabxxc5NktX2hwJPxVEdVxZLvXJfjndHWFkeM"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "s3UploadBucketName": "framefeed-upload-dev"
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "getUsers": {
        "handler": "functions.getUsers",
        "events": [
          {
            "http": {
              "path": "users",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "framefeed-dev-getUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUsersLambdaVersionWig70GgOUz2RgPgdK9bh6wRnaWZLeliDMB5NfAd8"
      },
      "getFeed": {
        "handler": "functions.getFeed",
        "events": [
          {
            "http": {
              "path": "{userId}/feed",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "framefeed-dev-getFeed",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetFeedLambdaVersionIVlOTkLvDqxfHtCaJbJB48G2ig3XqT9K2TIxtHqB7Q"
      },
      "removeItemFromFeed": {
        "handler": "functions.removeItemFromFeed",
        "events": [
          {
            "http": {
              "path": "{userId}/feed",
              "method": "delete",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "framefeed-dev-removeItemFromFeed",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "RemoveItemFromFeedLambdaVersioneuSBe9FJObI0hbjAbX4W8e7JbdFmOUZdWxtZqYqc"
      },
      "getUploadUrl": {
        "handler": "functions.getUploadUrl",
        "events": [
          {
            "http": {
              "path": "upload/get-url",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "framefeed-dev-getUploadUrl",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUploadUrlLambdaVersionArtua7SDX7c4xt8R8BlYdPNEGhnMMY2saf1DhDv866I"
      },
      "resize": {
        "handler": "functions.resize",
        "timeout": 180,
        "events": [
          {
            "s3": {
              "bucket": "framefeed-upload-dev",
              "rules": [
                {
                  "prefix": "input/"
                },
                {
                  "suffix": ".png"
                }
              ]
            }
          }
        ],
        "name": "framefeed-dev-resize",
        "package": {},
        "memory": 1024,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ResizeLambdaVersionAKVwQLabxxc5NktX2hwJPxVEdVxZLvXJfjndHWFkeM"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": "framefeed",
      "frameworkVersion": ">=1.1.0 <2.0.0",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "name": "aws",
        "profile": "adamdabbracci",
        "runtime": "nodejs12.x",
        "environment": {
          "ENV": "dev",
          "UPLOAD_BUCKET": "framefeed-upload-dev"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:*"
            ],
            "Resource": "*"
          }
        ]
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/adamdabbracci/Projects/Scratchpad/framefeed/api/.serverless/framefeed.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/framefeed/dev/1609978761482-2021-01-07T00:19:21.482Z",
    "artifact": "framefeed.zip"
  }
}